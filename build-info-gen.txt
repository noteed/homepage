title: Build information generation with Cabal and Git
author: Vo Minh Thu
date: 2010.02.09

   I'm slowly writing some infrastructure code for [Alphaner], a personal game
   programming project. For a while I wanted to include some information into the
   executable: the date of the build and the state of the Git repository.

   [Alphaner]: http://alphaner.blogspot.com/

   Here I describe how I did it. It is not something difficult or clever, and I'm
   not sure it is the best way to do it. I would be happy to hear any comment (I
   use gmail as user `noteed`).

   I use [Cabal] user-defined hooks to have some build-time generated code. The
   Setup.lhs goes like this (minus the Bird style and the sha-bang):

   [Cabal]: http://www.haskell.org/cabal/

    import Distribution.Simple
    import Distribution.PackageDescription (emptyHookedBuildInfo)
    import System.Directory (createDirectoryIfMissing)
    import System.Process (readProcess)

    main = defaultMainWithHooks myHooks
      where myHooks = simpleUserHooks { preBuild = myPreBuild }

    myPreBuild _ _ = do
      putStrLn "Generating dist/build/autogen/Build_alphaner..."
      createDirectoryIfMissing True "dist/build/autogen/"

      desc <- readProcess "git" ["describe", "--dirty=-modified"] ""
      now <- readProcess "date" ["+%s"] ""

      writeFile "dist/build/autogen/Build_alphaner.hs" $ unlines
        [ "module Build_alphaner where"
        , "import Data.DateTime"
        , "gitDescribe :: String"
        , "gitDescribe = " ++ show (init desc)
        , "buildTime :: DateTime"
        , "buildTime = fromSeconds " ++ now
        ]
      return emptyHookedBuildInfo

   Usually, you use just use `main = defaultMain`. Using `main =
   defaultMainWithHooks simpleUserHooks` would have the same effect.  To have the
   values we want, `readProcess` is used two times: one for the git information
   then one for the date. (I'm using the `date` executable but `getCurrentTime`
   would be enough.)

   With such a Setup.lhs, invoking `runhaskell Setup.lhs build` will create a
   Build_alphaner.hs module that can be imported in the rest of the code, just
   like any other module.

   Final notes: for `git describe` to return something meaningful, you should
   have a tag in your repo; I have chosen the dist/build/autogen/ directory
   because it is where Paths_alphaner.hs is already generated by Cabal.


